apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"
    defaultConfig {
        applicationId "com.anoulong.quickseries"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "0.0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Begin-flavors
    flavorDimensions "target"

    productFlavors {
        /**
         * https://docs.fabric.io/android/beta/gradle.html#distribution-with-gradle
         */
        alpha {

            dimension "target"
            resValue "string", "app_name", "AnouQuickSeries Alpha"
        }
        beta {
            dimension "target"
            resValue "string", "app_name", "AnouQuickSeries Beta"
        }
        prod {
            dimension "target"
            resValue "string", "app_name", "AnouQuickSeries"
        }
    }

    //generate apk : mergedFlavour-buildType-versionName-versionCode.apk
    applicationVariants.all { variant ->

        def flavorString = variant.getVariantData().getVariantConfiguration().getFlavorName()
        def mergedFlavour = variant.getVariantData().getVariantConfiguration().getMergedFlavor()

        //Alpha generated apk
        if (flavorString.equalsIgnoreCase("alpha")) {
            mergedFlavour.setApplicationId("com.anoulong.quickseries.alpha")
        }

        //Beta generated apk
        if (flavorString.equalsIgnoreCase("beta")) {
            mergedFlavour.setApplicationId("com.anoulong.quickseries.beta")
        }

        //Store generated apk
        if (flavorString.equalsIgnoreCase("prod")) {
            mergedFlavour.setApplicationId("com.anoulong.quickseries")
        }

        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = outputFile.name.replace('.apk', "-v${defaultConfig.versionName}-"+ variant.versionCode + ".apk")
                def finalName = fileName.replace('app-', "quickseries-")
                output.outputFile = new File(outputFile.parent, finalName)
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    // End-flavors

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support:design:26.+'
    testCompile 'junit:junit:4.12'
}
